kind: pipeline
type: docker
name: Build Docker Images

steps:
- name: Fetch repo
  image: alpine/git
  commands:
    - git fetch --tags

- name: Set environment variables
  image: plugins/docker
  commands:
    - |
      echo "CI_PLATFORM=droneio" > import.vars
      echo "IMAGE_NAME=jsloan117/test-ci" >> import.vars
      if [ "$DRONE_BRANCH" == "master" ]; then IMAGE_TAG=latest; else IMAGE_TAG=$DRONE_BRANCH; fi
      echo "IMAGE_TAG=$IMAGE_TAG" >> import.vars

- name: Build docker images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  #environment:
    #DOCKER_REPO:
    #  from_secret: docker_repo
  commands:
    - |
      echo -e "\n<<< building images >>>\n"
      source import.vars
      docker build -f Dockerfile -t $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG .

- name: Build ubuntu docker images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
    - |
      echo -e "\n<<< building ubuntu images >>>\n"
      source import.vars
      docker build -f Dockerfile.ubuntu -t $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG .

- name: Test images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - |
    source import.vars
    docker run --rm $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG bash --version
    docker run --rm $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG bash --version

- name: Push images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - |
    source import.vars
    echo "I would be logging in and pushing stuff................"
  trigger:
    event:
      exclude:
        - pull_request

- name: Remove created docker images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - |
    source import.vars
    docker rmi $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG
    docker rmi $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG

#- name: generate documentation
#  image:  python:3.7-alpine3.10
#  commands:
#    - pip --no-cache-dir install mkdocs mkdocs-material
#    - mkdocs build
#    - ls -lh && cd site/ && ls -lh
#  when:
#    branch:
#    - dev

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock

---
kind: pipeline
type: exec
name: Documentation Builder

steps:
- name: Generate documentation
  commands:
    - docker run --rm -v $(pwd):/docs jsloan117/docker-mkdocs mkdocs build --clean --strict
  when:
    branch:
    - dev

#- name: publish documentation
#  image: plugins/gh-release
#  settings:
#    pages_directory: site/
#  when:
#    branch:
#    - master

#volumes:
#- name: dockersock
#  host:
#    path: /var/run/docker.sock
#- name: docs
#  host:
#    path: $PWD/docs
