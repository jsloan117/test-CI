kind: pipeline
type: docker
name: Build Docker Images

steps:
- name: Fetch repo
  image: alpine/git
  commands:
    - git fetch --tags

- name: Set image tag
  image: plugins/docker
  commands:
    - |
      echo "CI_PLATFORM=droneio" > import.vars
      echo "IMAGE_NAME=jsloan117/test-ci" >> import.vars
      if [ "$DRONE_BRANCH" == "master" ]; then IMAGE_TAG=latest; else IMAGE_TAG=$DRONE_BRANCH; fi
      echo "IMAGE_TAG=$IMAGE_TAG" >> import.vars

- name: Build image
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
    - |
      source import.vars
      docker build -f Dockerfile -t $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG .

- name: Build ubuntu image
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
    - |
      source import.vars
      docker build -f Dockerfile.ubuntu -t $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG .

- name: Test images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - |
    source import.vars
    docker run --rm $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG bash --version
    docker run --rm $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG bash --version

- name: Push images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - |
    source import.vars
    echo "I would be logging in and pushing stuff................"
  when:
    branch:
      include:
      - master
      - dev
    event:
      exclude:
      - pull_request

- name: Remove images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - |
    source import.vars
    docker rmi $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG
    docker rmi $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG

- name: Generate documentation
  image:  python:3.7-alpine3.10
  environment:
    SSH_KEY:
      from_secret: ssh_key
  commands:
    - |
      echo "$SSH_KEY" > $HOME/.ssh/id_rsa
      pip --no-cache-dir install mkdocs mkdocs-material
      git config --global user.name "DroneIO"
      mkdocs gh-deploy -m "Deployed {sha} with MkDocs version {version}. [skip ci]" --force
  when:
    branch:
    - fixme

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock

---
kind: pipeline
type: exec
name: Documentation Builder

steps:
- name: Generate documentation
  commands:
    - pwd
    - echo $HOME
    - docker run --rm -v $(pwd):/docs jsloan117/docker-mkdocs mkdocs build -cs
  when:
    branch:
    - dev
