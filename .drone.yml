---
kind: pipeline
type: docker
name: Build Docker Images

steps:
- name: fetch repo
  image: alpine/git
  commands:
    - git fetch --tags

- name: build docker images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  environment:
    DOCKER_USER: jsloan117
    #DOCKER_REPO:
    #  from_secret: docker_repo
    DOCKERFILE: Dockerfile
    IMAGE_NAME: jsloan117/test-ci
    CI_PLATFORM: droneio
  commands:
    - if [ "$DRONE_BRANCH" == "master" ]; then IMAGE_TAG=latest; else IMAGE_TAG=$DRONE_BRANCH; export IMAGE_TAG; fi
    - echo "<<< Building docker images >>>"
    - docker build -f $DOCKERFILE -t $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG .

- name: build ubuntu docker images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  environment:
    DOCKER_USER: jsloan117
    #DOCKER_REPO:
    #  from_secret: docker_repo
    DOCKERFILE: Dockerfile.ubuntu
    IMAGE_NAME: jsloan117/test-ci
    CI_PLATFORM: droneio
  commands:
    - if [ "$DRONE_BRANCH" == "master" ]; then IMAGE_TAG=latest; else IMAGE_TAG=$DRONE_BRANCH; export IMAGE_TAG; fi
    - echo "<<< Building alternative docker images >>>"
    - docker build -f $DOCKERFILE -t $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG .

- name: remove created docker images
  image: plugins/docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  environment:
    IMAGE_NAME: jsloan117/test-ci
    CI_PLATFORM: droneio
  commands:
  - if [ "$DRONE_BRANCH" == "master" ]; then IMAGE_TAG=latest; else IMAGE_TAG=$DRONE_BRANCH; export IMAGE_TAG; fi
  - docker rmi $IMAGE_NAME:$CI_PLATFORM-$IMAGE_TAG
  - docker rmi $IMAGE_NAME:ubuntu-$CI_PLATFORM-$IMAGE_TAG

- name: generate documentation
  image:  jsloan117/docker-mkdocs:latest
  commands:
    - docker run --rm -it -v $PWD:/docs jsloan117/docker-mkdocs mkdocs build
  when:
    branch:
    - dev

- name: publish documentation
  image: plugins/gh-release
  settings:
    pages_directory: site/
  when:
    branch:
    - master

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock
